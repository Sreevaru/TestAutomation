package com.costco.automation.runner;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.edge.EdgeOptions;
import org.openqa.selenium.support.events.EventFiringWebDriver;
import org.testng.ITestResult;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.BeforeSuite;

import com.costco.automation.utilities.*;
import com.aventstack.extentreports.MediaEntityBuilder;

public class TestBase {

	protected WebDriver driver;

	@BeforeSuite
	public void initializeDriver() {
		// launchBrowser("http://www.costco.com");
	}

	@BeforeMethod
	public void browserSetup() {
		launchBrowser("http://www.costco.com");
	}

	@AfterMethod(alwaysRun = true)
	public void browserTeardown(ITestResult result) {
		WebDriver driver = DriverManager.getInstance().getDriver();
		String testCaseName = result.getMethod().getConstructorOrMethod().getName();
		if (result.getStatus() == ITestResult.FAILURE) {
			try {

				String imageFilePath = ScreenshotUtility.takeFullScreenShot(driver, testCaseName + "_Failed");
				System.out.println("Image captured - " + imageFilePath);
				
			} catch (Exception e) {
				e.printStackTrace();
				System.out.println("Error occured while capturing screenshot: " + e.getMessage());
			}
		}

		closeBrowser(driver);
	}

	public WebDriver launchBrowser(String url) {
		System.out.println("Launching Browser.");

		System.setProperty("webdriver.edge.driver",
				GlobalVariable.basePath + "\\resources\\edgedriver_win32\\msedgedriver.exe");

		this.driver = new EdgeDriver();

		DriverManager.getInstance().setDriver(driver);
		driver.get(url);
		driver.manage().window().maximize();
		driver.manage().timeouts().implicitlyWait(Long.parseLong(ConfigReader.getProperty("implicitlyWaitTime")),
				TimeUnit.SECONDS);
		return driver;
	}

	public void closeBrowser(WebDriver driver) {
		System.out.println("Closing Browser.");
		driver.quit();
	}

}
